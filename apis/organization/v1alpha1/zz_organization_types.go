/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrganizationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OrgID *int64 `json:"orgId,omitempty" tf:"org_id,omitempty"`
}

type OrganizationParameters struct {

	// The login name of the configured default admin user for the Grafana
	// installation. If unset, this value defaults to admin, the Grafana default.
	// Grafana adds the default admin user to all organizations automatically upon
	// creation, and this parameter keeps Terraform from removing it from
	// organizations.
	// +kubebuilder:validation:Optional
	AdminUser *string `json:"adminUser,omitempty" tf:"admin_user,omitempty"`

	// A list of email addresses corresponding to users who should be given admin
	// access to the organization. Note: users specified here must already exist in
	// Grafana unless 'create_users' is set to true.
	// +kubebuilder:validation:Optional
	Admins []*string `json:"admins,omitempty" tf:"admins,omitempty"`

	// Whether or not to create Grafana users specified in the organization's
	// membership if they don't already exist in Grafana. If unspecified, this
	// parameter defaults to true, creating placeholder users with the name, login,
	// and email set to the email of the user, and a random password. Setting this
	// option to false will cause an error to be thrown for any users that do not
	// already exist in Grafana.
	// +kubebuilder:validation:Optional
	CreateUsers *bool `json:"createUsers,omitempty" tf:"create_users,omitempty"`

	// A list of email addresses corresponding to users who should be given editor
	// access to the organization. Note: users specified here must already exist in
	// Grafana unless 'create_users' is set to true.
	// +kubebuilder:validation:Optional
	Editors []*string `json:"editors,omitempty" tf:"editors,omitempty"`

	// The display name for the Grafana organization created.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// A list of email addresses corresponding to users who should be given viewer
	// access to the organization. Note: users specified here must already exist in
	// Grafana unless 'create_users' is set to true.
	// +kubebuilder:validation:Optional
	Viewers []*string `json:"viewers,omitempty" tf:"viewers,omitempty"`
}

// OrganizationSpec defines the desired state of Organization
type OrganizationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrganizationParameters `json:"forProvider"`
}

// OrganizationStatus defines the observed state of Organization.
type OrganizationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrganizationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Organization is the Schema for the Organizations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafanajet}
type Organization struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OrganizationSpec   `json:"spec"`
	Status            OrganizationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationList contains a list of Organizations
type OrganizationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Organization `json:"items"`
}

// Repository type metadata.
var (
	Organization_Kind             = "Organization"
	Organization_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Organization_Kind}.String()
	Organization_KindAPIVersion   = Organization_Kind + "." + CRDGroupVersion.String()
	Organization_GroupVersionKind = CRDGroupVersion.WithKind(Organization_Kind)
)

func init() {
	SchemeBuilder.Register(&Organization{}, &OrganizationList{})
}
